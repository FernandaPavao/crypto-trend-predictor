# pessoa2_ml/pipeline_ml.py
import sys
import os

# Adicionar a pasta raiz ao path para importa√ß√µes funcionarem
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.db_config import conectar_banco
from pessoa1_data.armazenamento import coletar_dados
from eda import analise_exploratoria
from features import criar_features
from treino import treinar_modelo, salvar_modelo
from previsao import fazer_previsao
from datetime import datetime

def pipeline_completo():
    """
    Pipeline completo de Machine Learning para previs√£o de criptomoedas.
    
    Etapas:
    1. Conex√£o com banco de dados
    2. Coleta de dados
    3. An√°lise explorat√≥ria (EDA)
    4. Engenharia de features
    5. Treinamento do modelo
    6. Salvamento dos artefatos
    7. Previs√µes de exemplo
    """
    print("\n" + "="*70)
    print("üöÄ PIPELINE DE MACHINE LEARNING - CRYPTO PRICE PREDICTION")
    print("="*70)
    print(f"‚è∞ In√≠cio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*70)
    
    # 1. CONECTAR AO BANCO
    print("\n[1/7] üîå Conectando ao banco de dados...")
    conn = conectar_banco()
    
    if not conn:
        print("\n‚ùå ERRO: N√£o foi poss√≠vel conectar ao banco!")
        print("   Verifique as configura√ß√µes em utils/db_config.py")
        return
    
    # 2. COLETAR DADOS
    print("\n[2/7] üìä Coletando dados do banco...")
    df = coletar_dados(conn)
    conn.close()
    
    # Verificar se h√° dados suficientes
    if len(df) < 100:
        print("\n‚ö†Ô∏è  AVISO: Poucos dados dispon√≠veis!")
        print(f"   Atual: {len(df)} registros")
        print("   Recomendado: Pelo menos 100 registros")
        print("   Aguarde mais coletas antes de treinar o modelo.")
        return
    
    # 3. AN√ÅLISE EXPLORAT√ìRIA
    print("\n[3/7] üîç Realizando an√°lise explorat√≥ria...")
    analise_exploratoria(df)
    
    # 4. CRIAR FEATURES
    print("\n[4/7] üß© Criando features...")
    df_features = criar_features(df)
    
    # Verificar se h√° features suficientes
    if len(df_features) < 50:
        print("\n‚ö†Ô∏è  AVISO: Dados insuficientes ap√≥s feature engineering!")
        print(f"   Registros v√°lidos: {len(df_features)}")
        print("   Recomendado: Pelo menos 50 registros")
        print("   Aguarde mais coletas de dados.")
        return
    
    # 5. TREINAR MODELO
    print("\n[5/7] ü§ñ Treinando modelo...")
    modelo, scaler, feature_columns = treinar_modelo(df_features)
    
    # 6. SALVAR MODELO
    print("\n[6/7] üíæ Salvando modelo e artefatos...")
    salvar_modelo(modelo, scaler, feature_columns)
    
    # 7. FAZER PREVIS√ïES
    print("\n[7/7] üìà Fazendo previs√µes de exemplo...")
    df_previsoes = fazer_previsao(modelo, scaler, feature_columns, df_features)
    
    # RESUMO FINAL
    print("\n" + "="*70)
    print("‚úÖ PIPELINE CONCLU√çDO COM SUCESSO!")
    print("="*70)
    print(f"‚è∞ Fim: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    print("\nüì¶ ARQUIVOS GERADOS:")
    print("   üìÅ models/")
    print("      - modelo_crypto_classifier.pkl")
    print("      - scaler.pkl")
    print("      - feature_columns.pkl")
    print("   üìÅ graficos/")
    print("      - eda_completa.png")
    print("      - matriz_confusao.png")
    print("      - feature_importance.png")
    
    print("\nüéØ PR√ìXIMOS PASSOS:")
    print("   1. Revise os gr√°ficos em 'graficos/'")
    print("   2. Verifique a acur√°cia do modelo")
    print("   3. Envie a pasta 'pessoa2_ml/' completa para Pessoa 3")
    print("   4. Inclua tamb√©m a pasta 'models/' com os arquivos .pkl")
    
    print("\n" + "="*70)


if __name__ == "__main__":
    pipeline_completo()